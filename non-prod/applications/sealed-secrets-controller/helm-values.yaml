## Ref.: https://github.com/bitnami-labs/sealed-secrets/blob/46dd1eb566bfd91a9a843ada639cc525e43ddd67/helm/sealed-secrets/README.md


image:
  registry: registry.app.corpintra.net
  repository: ghcrcache/bitnami-labs/sealed-secrets-controller
  pullPolicy: IfNotPresent
  pullSecrets: 
    - "registry.app.corpintra.net-harbor-pull-secret"

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}

commandArgs: [--key-renew-period=2190h] # Renew key every 3 month, i.e. 365x24h*(3/12)
controller:
  # controller.create: `true` if Sealed Secrets controller should be created
  create: true

# namespace: Namespace to deploy the controller.
namespace: "toBeReplaced"

serviceAccount:
  # serviceAccount.create: Whether to create a service account or not
  create: true
  # serviceAccount.name: The name of the service account to create or use
  name: "sealedsecrets-serviceaccount"

rbac:
  # rbac.create: `true` if rbac resources should be created
  create: true
  pspEnabled: false

# secretName: The name of the TLS secret containing the key used to encrypt secrets
secretName: "sealed-secrets-key"

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /v1/cert.pem
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

crd:
  # crd.create: `true` if the crd resources should be created
  create: true
  # crd.keep: `true` if the sealed secret CRD should be kept when the chart is deleted
  keep: true

securityContext:
  # securityContext.runAsUser defines under which user the operator Pod and its containers/processes run.
  runAsUser: 1001
  # securityContext.fsGroup defines the filesystem group
  fsGroup: 65534

podAnnotations: {}

podLabels: {}

priorityClassName: ""

serviceMonitor:
  # Enables ServiceMonitor creation for the Prometheus Operator
  create: false
  # How frequently Prometheus should scrape the ServiceMonitor
  interval:
  # Extra labels to apply to the sealed-secrets ServiceMonitor
  labels:
  # The namespace where the ServiceMonitor is deployed, defaults to the installation namespace
  namespace:
  # The timeout after which the scrape is ended
  scrapeTimeout:

dashboards:
  # If enabled, sealed-secrets will create a configmap with a dashboard in json that's going to be picked up by grafana
  # See https://github.com/helm/charts/tree/master/stable/grafana#configuration - `sidecar.dashboards.enabled`
  create: false
  # Extra labels to apply to the dashboard configmaps
  labels:
  # The namespace where the dashboards are deployed, defaults to the installation namespace
  namespace:
